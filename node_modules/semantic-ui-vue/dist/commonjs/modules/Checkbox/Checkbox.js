'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _babelHelperVueJsxMergeProps = require('babel-helper-vue-jsx-merge-props');

var _babelHelperVueJsxMergeProps2 = _interopRequireDefault(_babelHelperVueJsxMergeProps);

var _lib = require('../../lib');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: 'SuiCheckbox',
  model: {
    prop: 'inputValue',
    event: 'change'
  },
  props: {
    inputValue: [Array, Boolean],
    label: String,
    toggle: Boolean,
    value: String
  },
  computed: {
    isArray: function isArray() {
      return Array.isArray(this.inputValue);
    },
    isChecked: function isChecked() {
      if (this.isArray) {
        return this.inputValue.includes(this.value);
      }

      return !!this.inputValue;
    }
  },
  methods: {
    setValue: function setValue(e) {
      var _this = this;

      var checked = e.target.checked;

      if (this.isArray) {
        if (checked) {
          this.$emit('change', this.inputValue.concat([this.value]));
        } else {
          this.$emit('change', this.inputValue.filter(function (v) {
            return v !== _this.value;
          }));
        }
      } else {
        this.$emit('change', checked);
      }
    }
  },
  render: function render() {
    var _this2 = this;

    var h = arguments[0];

    var ElementType = (0, _lib.getElementType)(this);
    return h(
      ElementType,
      (0, _babelHelperVueJsxMergeProps2.default)([(0, _lib.getChildProps)(this), {
        'class': (0, _lib.classes)('ui', !this.label && 'fitted', this.toggle && 'toggle', 'checkbox')
      }]),
      [h(
        'input',
        {
          ref: 'input',
          'class': 'hidden',
          attrs: { readonly: '',
            tabiindex: '0',
            type: 'checkbox'
          },
          domProps: {
            'checked': this.isChecked
          },
          on: {
            'change': this.setValue
          }
        },
        []
      ), h(
        'label',
        {
          on: {
            'click': function click() {
              return _this2.$refs.input.click();
            }
          }
        },
        [this.label]
      )]
    );
  }
};