'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _babelHelperVueJsxMergeProps = require('babel-helper-vue-jsx-merge-props');

var _babelHelperVueJsxMergeProps2 = _interopRequireDefault(_babelHelperVueJsxMergeProps);

var _lib = require('../../lib');

var _Icon = require('../../elements/Icon/Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _MessageContent = require('./MessageContent');

var _MessageContent2 = _interopRequireDefault(_MessageContent);

var _MessageHeader = require('./MessageHeader');

var _MessageHeader2 = _interopRequireDefault(_MessageHeader);

var _MessageItem = require('./MessageItem');

var _MessageItem2 = _interopRequireDefault(_MessageItem);

var _MessageList = require('./MessageList');

var _MessageList2 = _interopRequireDefault(_MessageList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: 'SuiMessage',
  components: { SuiIcon: _Icon2.default, SuiMessageContent: _MessageContent2.default, SuiMessageHeader: _MessageHeader2.default, SuiMessageItem: _MessageItem2.default, SuiMessageList: _MessageList2.default },
  props: {
    content: String,
    dismissable: Boolean,
    header: String,
    icon: [Boolean, String],
    info: {
      type: Boolean,
      description: 'A message may be formatted to display information.'
    },
    list: Array
  },
  methods: {
    handleDismiss: function handleDismiss() {
      this.$emit('dismiss');
    }
  },
  render: function render() {
    var h = arguments[0];

    var hasIcon = this.icon || this.icon === '';
    var icon = typeof this.icon === 'string' && this.icon;

    var content = [this.header && h(
      _MessageHeader2.default,
      null,
      [this.header]
    ), this.content, this.$slots.default, this.list && h(
      _MessageList2.default,
      null,
      [this.list.map(function (item) {
        return h(
          _MessageItem2.default,
          null,
          [item]
        );
      })]
    )];

    var ElementType = (0, _lib.getElementType)(this);
    return h(
      ElementType,
      (0, _babelHelperVueJsxMergeProps2.default)([(0, _lib.getChildProps)(this), {
        'class': (0, _lib.classes)('ui', hasIcon && 'icon', this.info && 'info', 'message')
      }]),
      [this.dismissable && h(
        _Icon2.default,
        {
          attrs: { name: 'close' },
          nativeOn: {
            'click': this.handleDismiss
          }
        },
        []
      ), icon && h(
        _Icon2.default,
        {
          attrs: { name: icon }
        },
        []
      ), icon && h(
        _MessageContent2.default,
        null,
        [content]
      ), !icon && content]
    );
  }
};